<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memnoth</title>
    <link>https://memnoth.github.io/index.xml</link>
    <description>Recent content on Memnoth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Hyun Jun, An</copyright>
    <lastBuildDate>Sun, 24 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://memnoth.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>YouCompleteMe - libtinfo.so.5 not found</title>
      <link>https://memnoth.github.io/post/ycm-libtinfo-so-5-not-found/</link>
      <pubDate>Sun, 24 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/ycm-libtinfo-so-5-not-found/</guid>
      <description>&lt;p&gt;Laptop에 Fedora 24를 설치하고 YouCompleteMe&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 인스톨했으나 &lt;em&gt;SHUTTING DOWN&lt;/em&gt; 오류를 출력하며 정상적으로 실행되지 않았다.&lt;br /&gt;
&lt;strong&gt;:YcmToggleLogs stderr&lt;/strong&gt;를 통하여 디버깅을 해보니 시스템에서 &lt;code&gt;libtinfo.so.5&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;를 찾지 못해 발생한 예외였다.&lt;/p&gt;

&lt;p&gt;설치된 패키지가 있나 확인해보니 6.0.5 버전으로 존재했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dnf list installed | grep ncurses
ncurses.x86_64                         6.0-5.20160116.fc24      @koji-override-0
ncurses-base.noarch                    6.0-5.20160116.fc24      @koji-override-0
ncurses-libs.x86_64                    6.0-5.20160116.fc24      @koji-override-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lib64 디렉터리에서도 &lt;code&gt;libtinfo.so.6&lt;/code&gt;을 찾을 수 있다, 나는 libtinfo.so.5를 원하는데&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l /lib64/libtinfo*
lrwxrwxrwx. 1 root root     15  4월  8 19:33 /lib64/libtinfo.so.6 -&amp;gt; libtinfo.so.6.0
-rwxr-xr-x. 1 root root 180192  4월  8 19:33 /lib64/libtinfo.so.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;물론 5까지 지원하는 &lt;code&gt;ncurses-compat-libs&lt;/code&gt;를 설치해도 되지만 심볼릭 링크를 이용해서 처리했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo ln -s /lib64/libtinfo.so.6.0 /lib64/libtinfo.so.5

$ ls -l /lib64/libtinfo*
lrwxrwxrwx. 1 root root     15  7월 24 02:06 libtinfo.so.5 -&amp;gt; libtinfo.so.6.0
lrwxrwxrwx. 1 root root     15  4월  8 19:33 libtinfo.so.6 -&amp;gt; libtinfo.so.6.0
-rwxr-xr-x. 1 root root 180192  4월  8 19:33 libtinfo.so.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 vim을 실행해보면 &lt;em&gt;SHUTTING DOWN&lt;/em&gt; 오류는 출력되지 않는다.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;vim에서 사용할 수 있는 우수한 code completion engine이다. &lt;a href=&#34;https://github.com/Valloric/YouCompleteMe&#34;&gt;link&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;libtinfo는 ncurses 라이브러리 파일이다.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning MSP430F5529 - # Interrupt</title>
      <link>https://memnoth.github.io/post/learning-msp430f5529-interrupt/</link>
      <pubDate>Sun, 10 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/learning-msp430f5529-interrupt/</guid>
      <description>

&lt;h4 id=&#34;이-글은-인터럽트-예제를-분석한-글이다-어느-누군가에게-도움이-되길&#34;&gt;&lt;em&gt;이 글은 인터럽트 예제를 분석한 글이다, 어느 누군가에게 도움이 되길&amp;hellip;&lt;/em&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;아래 코드는 &lt;a href=&#34;https://ti.com&#34;&gt;ti.com&lt;/a&gt;에서 제공하는 인터럽트 예제코드&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;...

#define RED_LED P1OUT   // On-board RED led.

int main(void)
{
    P1DIR |= 0x01;      // Set direction OUT the led.
    TA0CCTL0 = CCIE;
    TA0CCR0 = 50000;
    TA0CTL = TASSEL_2 + MC_1 + TACLR;

    __bis_SR_register(LPM0_bits + GIE);
}

...

#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR(void)
{
    RED_LED ^= 0x01;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;GIE&lt;/code&gt; - General interrupt enable의 약자로 MCU의 인터럽트 허용여부를 결정한다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LPM0_bits&lt;/code&gt; - CPUOFF 값에 매핑되어 있다, 해당 비트가 1로 설정되면 CPU는 off 상태로 변경된다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__bis_SR_register()&lt;/code&gt; - CPU의 SR&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;를 제어하는 함수이다, 해당 레지스터는 CPU core에 존재하며 CPU 연산 결과에 대한 상태를 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
컴파일하고 MSP430F5529의 메모리를 디버깅해보면 &lt;code&gt;__bis_SR_register&lt;/code&gt; 함수를 실행하고 GIE bit가 enable되는 순간부터 TA0R&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 레지스터가 TA0CCR0&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 레지스터의 값과 비교하며 50000까지 증가한다.&lt;br /&gt;
상태 레지스터를 디버깅해보면 &lt;strong&gt;CPUOFF&lt;/strong&gt; bit가 1로 세팅되어 있으므로 ISR&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;만 계속 처리하고 있음을 알게된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;코드를 아래와 같이 변경하고 다시 실행하면 while 루틴과 번갈아가며 처리함을 알 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;...

#define RED_LED P1OUT       // on-board RED led.
#define GREEN_LED P4OUT     // on-board GREEN led.

int main(void)
{
    P1DIR |= (1 &amp;lt;&amp;lt; 0);      // set direction OUT the RED led.
    P4DIR |= (1 &amp;lt;&amp;lt; 7);      // set direction OUT the GREEN led.
    TA0CCTL0 = CCIE;
    TA0CCR0 = 50000;
    TA0CTL = TASSEL_2 + MC_1 + TACLR;

    __bis_SR_register(GIE);

    while (1)
    {
        int i;

        GREEN_LED ^= (1 &amp;lt;&amp;lt; 7);
        for (i = 0; i &amp;lt; 30000; i++);
    }
}

...

#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR(void)
{
    RED_LED ^= 0x01;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;재미있는건 TA0R 레지스터 값이 증가할 때 전혀 CPU core 레지스터를 사용하지 않는다..!&lt;br /&gt;
또한 SR 전체인지, GIE bit인지는 모르겠지만 GIE가 0으로 설정되고 다른 ISR 호출을 허용하지 않는다.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;MSP430F55xx_ta0_02.c
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Status Register
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Timer_A0 Counter Register
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Timer_A0 Capture/Compare Control 0 Register
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;Interrupt Service Routine
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>비글본 블랙에서의 Dynamic Linking 오류</title>
      <link>https://memnoth.github.io/post/dynamic-linking-error-on-bbb/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/dynamic-linking-error-on-bbb/</guid>
      <description>&lt;p&gt;임베디드 시스템에선 코드 작성 및 컴파일을 빠르게 하기 위해 Host PC와 Target board를 NFS로 연결하여 Host PC에서 컴파일 작업을 하고, Target board에서는 실행시키는 구조로 개발환경을 빌드한다.&lt;/p&gt;

&lt;p&gt;NFS 개발환경을 설정한 다음 arm gcc를 이용하여 컴파일을 했음에도 불구하고 &lt;code&gt;No such file or directory&lt;/code&gt; 오류가 발생하였다.&lt;br /&gt;
계정 권한, 파일 권한, Host PC의 mount 권한까지 모두 확인하였지만 잘못된 부분이 없었기에 무척 난감했는데 Dynamic Linking이 원인이였다.&lt;/p&gt;

&lt;p&gt;test가 실행파일이라 가정하고 &lt;code&gt;file&lt;/code&gt; 명령어를 이용하여 확인해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.3, for GNU/Linux 2.6.16, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/lib/&lt;strong&gt;ld-linux.so.3&lt;/strong&gt;는 프로그램이 메모리에 적재되는 시점에서 실행에 필요한 라이브러리를 링킹해주는 파일이다.&lt;br /&gt;
Host PC에서 프로그램 링킹은 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt;가 담당하지만 비글본 블랙에서의 링킹은 /lib/&lt;code&gt;ld-linux-armhf.so.3&lt;/code&gt;이 담당한다.&lt;br /&gt;
비글본 블랙에서 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt;를 찾을 수 없으니 실행이 되지 않았던 것인데 그렇다고 &lt;code&gt;ld-linux-armhf.so.3&lt;/code&gt;를 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt;로 바꾸면 안된다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ld-linux-armhf.so.3&lt;/code&gt;를 링크하는 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt; 심볼릭 링크를 생성시키면 올바르게 동작한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /lib/ld-linux-armhf.so.3 /lib/ld-linux.so.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;비글본 블랙에서 위의 명령어로 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt; 심볼릭 링크를 생성하고 &lt;code&gt;./test&lt;/code&gt;로 다시 실행해보자.&lt;br /&gt;
이젠 제대로 실행한다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mmap을 이용하여 GPIO 제어하기 - #1. Clock Enabling</title>
      <link>https://memnoth.github.io/post/beagleboard-handle-gpio-by-mmap-01/</link>
      <pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/beagleboard-handle-gpio-by-mmap-01/</guid>
      <description>

&lt;h4 id=&#34;아래-가이드는-c-언어와-linux에-능숙하고-computer-organization-microprocessor를-수강한-적-있는-학부생에게-추천합니다&#34;&gt;&lt;em&gt;아래 가이드는 C 언어와 Linux에 능숙하고 Computer Organization, Microprocessor를 수강한 적 있는 학부생에게 추천합니다.!&lt;/em&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;왜-mmap을-이용하여-direct로-접근하나요&#34;&gt;왜 mmap을 이용하여 direct로 접근하나요?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The memory-mapping method allows you to directly access the registors that control the&lt;br /&gt;
GPIOs. Memory-mapping is very fast (about 1000 times faster than file I/O!), but only&lt;br /&gt;
processes with root permissions can use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;책&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;에 따르면 memory-mapping 함수는 register에 직접 접근하도록 하며, 이는 &lt;code&gt;file I/O&lt;/code&gt; 방식보다 1000배는 빠르다고 합니다.&lt;/p&gt;

&lt;p&gt;BeagleBone Black의 GPIO는 기본적으로 disable 되어 있는데, 이를 활성화는 방법에는 2가지가 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SYSFS를 이용한 GPIO export.&lt;/li&gt;
&lt;li&gt;Register를 이용하여 직접 clock을 enable 하는 것.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서는 C 코드를 이용하여 register를 직접 제어하는 것에 포커스를 맞추겠습니다.&lt;br /&gt;
(SYSFS를 이용한 GPIO는 Beagleboard 홈페이지에 가면 친절하게 설명해줍니다)&lt;/p&gt;

&lt;p&gt;들어가기에 앞서 아래의 준비물이 필요합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiZjbzk3ObMAhXC3KYKHeorDmYQFggcMAA&amp;amp;url=http%3A%2F%2Fwww.ti.com%2Flit%2Fug%2Fspruh73m%2Fspruh73m.pdf&amp;amp;usg=AFQjCNGGBH3-5NJnlA7Plnk3BhbVi_u77g&amp;amp;sig2=IK-nMfK0scQli5VemGRPPA&amp;amp;bvm=bv.122448493,d.dGY&#34;&gt;AM335x Sitara Processors, Technical Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CircuitCo/BeagleBone-Black/blob/master/BBB_SRM.pdf&#34;&gt;BeagleBone Black System Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/derekmolloy/boneDeviceTree/tree/master/docs&#34;&gt;Derek Molloy&amp;rsquo;s Header Table Reference&lt;/a&gt; - both P8, and P9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;주로 Technical Reference Manual(이하 TRM)과 Header Table 문서를 참조하니 GPIO PIN 개념을 이해하고 TRM에서 register 정보를 찾을 수 있어야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;register를-이용하여-clock을-enable-하기&#34;&gt;Register를 이용하여 clock을 enable 하기&lt;/h3&gt;

&lt;p&gt;리눅스는 대부분의 device를 파일로 추상화하여 제공합니다, 모듈화가 아주 잘 되어 있죠.&lt;br /&gt;
Device를 파일로 접근한다면 모든 처리 루틴을 아래와 같이 쉽게 생각할 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;파일을 연다.&lt;/li&gt;
&lt;li&gt;파일에 데이터를 쓴다.&lt;/li&gt;
&lt;li&gt;파일을 닫는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;우리는 메모리에 직접 접근하여 register에 데이터를 쓰기(&lt;strong&gt;write&lt;/strong&gt;)할 것이므로 메모리를 추상화한 &lt;code&gt;/dev/mem&lt;/code&gt;을 이용할 것입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;...
fd = open(&amp;quot;/dev/mem&amp;quot;, O_RDWR|O_SYNC);

/* 기타 처리 루틴 ~ */

gpio_addr = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, GPIO_BASE_ADDR);

*(gpio_addr + led_addr) = 0x01;     // LED를 On하는 로직이라 가정.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/dev/mem&lt;/code&gt;을 오픈하고 &lt;code&gt;mmap()&lt;/code&gt;을 호출하는 것 까진 좋으나 mapped memory를 통하여 값에 접근하려면 아마도 실패할 것입니다.&lt;br /&gt;
이는 GPIO의 clock이 기본적으로 disable 되어 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;Patricia 씨가 구글 그룹스에 남긴 글입니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;일단 그건 clock 문제야, 우리가 BeagleBone Black을 부팅할 때 GPIO 1, 2, 그리고 3의 clocking system은 비활성화 되버려 (GPIO 0은 항상 활성 상태).&lt;/p&gt;

&lt;p&gt;따라서 다음과 같은 방법이 있는데:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pin export 하기 (and then the system enables the clock automatically)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;CM_PER_GPIO#_CLKCTRL 레지스터의 일부 bits 수정하기 (TRM의 CM_PER 페이지 참조)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;mdash; Patricia N.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서 CM_PER_GPIO2_CLKCTRL을 활성화하기 위해 TRM 문서의 CM_PER_GPIO2_CLKCTRL&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;의 &lt;code&gt;MODULEMODE&lt;/code&gt;을 확인해야 합니다.&lt;br /&gt;
해당 register의 값을 2로 수정하므로써 clock이 enable 되는 것입니다.&lt;/p&gt;

&lt;p&gt;아래 소스코드를 분석하여 확실하게 이해하세요.&lt;br /&gt;
(간단하게 작성하였으므로 완벽하게 동작하지 않습니다.!)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define CM_PER_BASE 0x44E00000

#define CM_PER_GPIO1 0xAC
#define CM_PER_GPIO2 0xB0
#define CM_PER_GPIO3 0xB4

#define MODE_ENABLE 0x2

void init_GPIO_enable(int fd);

int main(void)
{
    ...

    init_GPIO_enable(mem_fd);

    ...
}

void init_GPIO_enable(int fd)
{
    ...

    // CM_PER_BASE 주소를 기반으로 memory mapped 합니다.
    cm_per_addr = (char *)mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, CM_PER_BASE);

    ...

    // CM_PER_GPIO2의 오프셋 주소의 값을 수정하여 Enable 합니다. 
    *(cm_per_addr + CM_PER_GPIO2) = MODE_ENABLE;

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 &lt;code&gt;GPIO_OE&lt;/code&gt;, &lt;code&gt;GPIO_DATAIN&lt;/code&gt;, &lt;code&gt;GPIO_DATAOUT&lt;/code&gt;을 이용하여 값을 읽고 쓸수 있습니다.&lt;br /&gt;
한번 enable 하면 Process를 종료하더라도 해당 register의 값은 변하지 않습니다.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://www.amazon.com/Android-beaglebone-black-andrew-henderson-ebook&#34;&gt;Android for the BeagleBone Black&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://beagleboard.org/Community/Forums?place=msg%2Fbeagleboard%2FOYFp4EXawiI%2F4T1CsRpjAQAJ&#34;&gt;구글 그룹스&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;1196 page
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What is Copy-On-Write?</title>
      <link>https://memnoth.github.io/post/what-is-copy-on-write/</link>
      <pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/what-is-copy-on-write/</guid>
      <description>&lt;p&gt;&lt;em&gt;Copy-On-Write&lt;/em&gt; 란 folk()를 이용하여 Child Process를 생성하는 시점에서는 Parent의 메모리를 참조하다가 Child Process의 Context가 변경될 때 메모리를 복사하는 메커니즘이다.&lt;/p&gt;

&lt;p&gt;아래의 코드가 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int pid, temp = 1;
pid = folk();

if (pid == 0)
{
    printf(&amp;quot;I&#39;m a child!\n&amp;quot;);
    temp = 2;
}
else if (pid &amp;gt; 0)
{
    printf(&amp;quot;I&#39;m a parent!\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;folk()가 실행되고 나서 메모리는 아래의 그림과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://memnoth.github.io/imgs/cow01.png&#34; alt=&#34;cow1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;프로세스는 각자의 공간을 가지고 있다고 배웠지만 Modern Operating System 들은 메모리 자원을 효율적으로 관리/사용하기 위해 COW 메커니즘을 이용한다.&lt;br /&gt;
Context가 변경되지 않는다면 PC(Program Counter)/Registers/Stack/Code/Data가 모두 똑같으므로 같은 메모리를 참조하다가 &lt;code&gt;temp = 2&lt;/code&gt;를 만나는 순간 Child Process의 Instance는 변경되므로 아래처럼 변경된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://memnoth.github.io/imgs/cow02.png&#34; alt=&#34;cow2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;temp = 2&lt;/code&gt;가 Space 3의 Context라 가정하면 Child Process를 위한 Space 3가 생성되고 Copy된다.&lt;/p&gt;

&lt;p&gt;디테일한 메커니즘은 더 복잡하겠지만 학부 수준에서는 이 정도만 알아도 된다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://memnoth.github.io/home/about/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/home/about/</guid>
      <description>

&lt;h2 id=&#34;biography&#34;&gt;Biography&lt;/h2&gt;

&lt;p&gt;2016 KossLab Hackathon - linux-perf&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designated Initializer in C</title>
      <link>https://memnoth.github.io/post/designated-initializer-in-c/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/designated-initializer-in-c/</guid>
      <description>&lt;p&gt;Designated Initializer는 C99에서 표준화된 문법으로 아래와 같이 배열의 초기화가 가능하다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;int arr[10] = { [4] = 31, 32, [1] = 0, 1, 2, 3 };&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그런데 GCC 컴파일러에서 C89(as C90) 표준으로 컴파일해도 오류없이 컴파일이 가능했다..!&lt;br /&gt;
왜 가능한지 궁금하여 검색하던 중에 GCC 문서에서 그 내용을 찾을 수 있었다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In ISO C99 you can give the elements in any order, specifying the array indices
or structure field names they apply to, and GNU C allows this an extension in
C90 mode as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GCC 컴파일러에선 C90 표준까지도 지원하도록 확장되었다고 한다.&lt;/p&gt;

&lt;p&gt;모든 컴파일러가 이러한 문법을 지원하는 것은 아니니 혼란스러워 하지 말아야 한다.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keep the spirit of C</title>
      <link>https://memnoth.github.io/post/keep-the-spirit-of-c/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/keep-the-spirit-of-c/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Trust the programmer.&lt;br /&gt;
프로그래머를 믿을 것.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t prevent the programmer from doing what needs to be done.&lt;br /&gt;
프로그래머가 사용하는 방법을 제지하지 말 것.&lt;/li&gt;
&lt;li&gt;Keep the language small and simple.&lt;br /&gt;
작고 간단한 언어로 유지할 것.&lt;/li&gt;
&lt;li&gt;Provide only one way to do an operation.&lt;br /&gt;
하나의 명령에 하나의 방법만 제시할 것.&lt;/li&gt;
&lt;li&gt;Make it fast, even if it is not guaranteed to be portable.&lt;br /&gt;
이식성을 포기하더라도 빠르게 만들 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C가 가진 자율성과 목적에 대한 이해가 있어야 올바르게 사용할 수 있다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Babelian</title>
      <link>https://memnoth.github.io/project/babelian/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/project/babelian/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Flask-Register</title>
      <link>https://memnoth.github.io/project/flask-register/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/project/flask-register/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Get Your Questions Answered</title>
      <link>https://memnoth.github.io/post/how-to-get-your-questions-answered/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/how-to-get-your-questions-answered/</guid>
      <description>

&lt;h2 id=&#34;introduce&#34;&gt;Introduce&lt;/h2&gt;

&lt;p&gt;사람들은 왜 당신의 질문에 답변하지 않는 걸까?&lt;br /&gt;
이 글은 당신의 시간을 절약하며, 빠른 답변을 얻을 수 있도록 도와줄지도 모른다.&lt;/p&gt;

&lt;h2 id=&#34;당신은-왜-답변-받지-못하는-걸까&#34;&gt;당신은 왜 답변 받지 못하는 걸까?&lt;/h2&gt;

&lt;p&gt;상대방의 입장에서 당신의 질문을 객관적으로 살펴볼 필요가 있다.&lt;br /&gt;
아마 다음과 같은 공통된 문제점을 가지고 있을 것이다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;질문이 너무 광범위하다.
당신의 질문이 광범위하고 추상적이라 디테일하게 다시 물어봐야 한다. 그냥 안 물어보고 신경 끈다.&lt;/li&gt;
&lt;li&gt;불필요한 내용이 많고 길다.
긴 글 읽다가 지친다, 대충 읽고 대충 답변하거나 그냥 무시한다.&lt;/li&gt;
&lt;li&gt;에티켓이 없다.
10대 언어나 반말을 사용한다. 당신 후배가 저렇게 질문하면 어떤가?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;대부분 &lt;code&gt;1&lt;/code&gt;번 문제를 가지고 있다.&lt;/p&gt;

&lt;h3 id=&#34;1-질문의-내용을-최대한-나누고-디테일하게-서술하기&#34;&gt;1. 질문의 내용을 최대한 나누고 디테일하게 서술하기&lt;/h3&gt;

&lt;p&gt;요점만 정리하여 하나의 요구 사항만 전달해야 한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;저희 학교 커리큘럼 A인데 뭘 듣는 게 좋을까요? &amp;ndash; 확률 10%&lt;/li&gt;
&lt;li&gt;저희 학교 커리큘럼 A인데 B 분야로 가고 싶거든요, 뭐가 좋을까요? &amp;ndash; 확률 70%&lt;/li&gt;
&lt;li&gt;저희 학교 커리큘럼 A인데 B 분야로 가고 싶거든요, C와 D 중에서 어느 것이 더 좋을까요? &amp;ndash; 확률 100%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;은 상대방이 당신의 커리큘럼을 확인하는 시간과 비슷한 과목을 걸러내는 시간, 정리하는 시간이 필요하다. 아주 운 좋은 경우 친절한 어느 분이 커리큘럼을 분석하고 과목을 정리한 후 알려준다.&lt;/p&gt;

&lt;h3 id=&#34;2-질문의-요점을-상단-제목에-작성하기&#34;&gt;2. 질문의 요점을 상단/제목에 작성하기&lt;/h3&gt;

&lt;p&gt;요점을 확인하고 당신에게 충고할 수 있는 사람만 클릭하도록 유도를 하는 것이다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;자바 오류 도와주세요!!&lt;/li&gt;
&lt;li&gt;자바 파일 처리 중 A 메서드에서 B 오류가 납니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt;는 파일 처리 경험이 많은 사람이 당신을 돕는다.&lt;/p&gt;

&lt;h3 id=&#34;3-정보와-방법-제공하기&#34;&gt;3. 정보와 방법 제공하기&lt;/h3&gt;

&lt;p&gt;당신이 연구/공부하는 분야의 환경과 관련된 정보를 제공해야 한다. 또한 상대방이 문제를 쉽게 읽고 분석할 수 있도록 가능한 관련된 링크와 문서 폼을 링크&amp;mdash;Gist/Pastebin나 자신의 개발 환경 정보.&amp;mdash;로 첨부하고 시도했던 방법에 대해 제공해야 한다.&lt;/p&gt;

&lt;h3 id=&#34;4-관련-키워드로-검색하기&#34;&gt;4. 관련 키워드로 검색하기&lt;/h3&gt;

&lt;p&gt;당신이 질문하는 내용 80-90%는 이미 누군가 질문을 한 내용이다. 최대한 검색하고 이해를 한 상태에서 자신의 질문을 작게 나누어 디테일하게 설명해야 한다. 상대방은 당신의 질문만 보고 당신이 관련 키워드로 검색을 했는지 안 했는지 알 수 있다.&lt;/p&gt;

&lt;h3 id=&#34;5-올바른-커뮤니티에서-질문하기&#34;&gt;5. 올바른 커뮤니티에서 질문하기&lt;/h3&gt;

&lt;p&gt;해당 커뮤니티는 그 분야에서 매일 활동하는 분들의 모임이다. 그 외의 주제에 대해 알 수는 있으나 완벽하지 않다. 답변을 받지 못하였다면 자신이 관련 커뮤니티에서 질문했는지 생각해야 한다.&lt;/p&gt;

&lt;p&gt;당신이 질문을 얼마나 신경 써서 하느냐에 따라 답변의 내용도 달라진다. 이것은 선택이 아닌 질문에 대한 에티켓이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;원문 &amp;ndash; Hyun Jun, An&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python - Auto generate requirements.txt</title>
      <link>https://memnoth.github.io/post/python-auto-generate-requirements/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/python-auto-generate-requirements/</guid>
      <description>

&lt;h2 id=&#34;why-requirements-txt&#34;&gt;&lt;em&gt;Why requirements.txt?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;모든 애플리케이션은 실행될 때 요구하는 종속된 라이브러리들을 가지고 있습니다.&lt;br /&gt;
requirements 파일은 한 번에 어떠한 라이브러리가 종속적인지 확인하고 설치하도록 도와줍니다.&lt;/p&gt;

&lt;h3 id=&#34;requirements-파일-형식&#34;&gt;requirements 파일 형식:&lt;/h3&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requests==1.2.0
Flask==0.10.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;방법-1&#34;&gt;방법 1:&lt;/h3&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;requirements.txt 파일을 생성하기 위해 pip의 freeze 명령어를 사용합니다.:&lt;br /&gt;
위의 포맷 형식으로 requirements.txt을 생성했다면, &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;로 사용할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;방법-2&#34;&gt;방법 2:&lt;/h3&gt;

&lt;p&gt;pipreqs 사용하기 - pipreqs란 프로젝트에 사용된 패키지만 이용하여 requirements.txt 파일을 생성하는 방법입니다.&lt;/p&gt;

&lt;h4 id=&#34;왜-pip-freeze가-아닌가요&#34;&gt;왜 pip freeze가 아닌가요?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;virtualenv를 사용하지 않는 한 pip freeze는 프로젝트에서 사용하지 않는 패키지도 모두 포함합니다.&lt;/li&gt;
&lt;li&gt;pip freeze는 오로지 당신의 개발 환경에 설치된 패키지들만 사용하여 구성합니다.&lt;/li&gt;
&lt;li&gt;때로는 패키지를 설치하지 않고 requirements.txt를 생성할 필요가 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;어떻게-사용하나요&#34;&gt;어떻게 사용하나요?&lt;/h4&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install pipreqs
$ pipreqs /path/to/project
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;원문 &amp;ndash; &lt;a href=&#34;http://www.idiotinside.com/2015/05/10/python-auto-generate-requirements-txt/&#34;&gt;Python - Auto generate requirements.txt&lt;/a&gt; (Suresh Kumar)&lt;br /&gt;
번역 &amp;ndash; Hyun Jun, An&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Five programming problems every Software Engineer should be able to solve in less than 1 hour</title>
      <link>https://memnoth.github.io/post/five-programming-problems-every-software-engineer-should-be-able-to-solve-in-less-than-1-hour/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/five-programming-problems-every-software-engineer-should-be-able-to-solve-in-less-than-1-hour/</guid>
      <description>

&lt;p&gt;제가 Software Engineer 포지션 구인 공고를 냈을 때, 지원자들은 빠르게 움직이기 시작했습니다. 절 귀찮게 만든 몇몇의 지원자들은 항상 &lt;em&gt;Programming&lt;/em&gt; 이 무슨 의미인지 모른다는 것이죠.
&lt;p&gt;&lt;/p&gt;
&lt;img src=&#34;http://i.imgur.com/Zns27G1.jpg&#34; alt=&#34;Image&#34; /&gt;&lt;br /&gt;
물론, 그들은 다르게 생각할 겁니다.&lt;/p&gt;

&lt;p&gt;만약 당신이 jQuery를 안다면 &lt;em&gt;Front-End Web Developer&lt;/em&gt; 포지션에 지원하는 건 괜찮다고 생각해요, 하지만 &lt;em&gt;Software Engineer&lt;/em&gt; 포지션에서도 HTML, JavaScript, CSS 만 요청할 것 같나요?
(저는 XML, JSON, XSLT, SOAP, HTTP, REST, SSL, 기타 200개가 넘는 여러 용어&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;들에 대하여 떠드는 사람들을 좋아하기도 하지만, 그들은 &lt;code&gt;int&lt;/code&gt;와 &lt;code&gt;float&lt;/code&gt;의 차이를 설명하지 못 해요.)&lt;/p&gt;

&lt;h2 id=&#34;can-you-actually-code-anything&#34;&gt;&lt;em&gt;Can you actually code anything?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;제 Software Engineer 포지션에서, 저는 당신이 뭔가 코딩하기를 기대해요. 제가 말하는 진짜 코딩이란; 제가 당신에게 하나의 문제를 넘겨주고, 당신은 하나의 언어를 사용하여 안정적이게 문제를 해결하는 것입니다.&lt;br /&gt;
당신 스스로에게 질문해보세요, 당신은 정말 할 수 있습니까?&lt;br /&gt;
제가 딜을 하나 하죠: 만약 당신이 이 5개의 문제를 1시간 내에 해결할 수 없다면, 당신의 이력서에 대해 다시 생각해보고 싶겠죠. 당신이 하는 일에 있어 당신이 최고일지도 모르지만, 당신은 당신 스스로 &lt;em&gt;Software Engineer&lt;/em&gt;, &lt;em&gt;Programmer&lt;/em&gt;, &lt;em&gt;Computer Science specialist&lt;/em&gt;, *Developer*라고 부르는 것을 멈추어야 합니다. 스스로를 포장하는 짓을 그만두세요, 그리고 우선순위에 다시 집중하는 시간을 가지세요.&lt;/p&gt;

&lt;h2 id=&#34;the-5-problems&#34;&gt;&lt;em&gt;The 5 problems&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;아래 문제들은 꽤나 쉬워요, 하지만 많은 사람들이 이 문제와 씨름한다는 것을 알면 당신은 놀랄 거예요. To the point of not getting anything done at all. 진심으로요.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;problem-1&#34;&gt;Problem 1&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;하나의 list를 받아서 총합을 구하는 함수 3개를 for, while, recursion(재귀)로 설계하세요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;problem-2&#34;&gt;Problem 2&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;두개의 list를 받아, 각각의 원소들이 순서대로 층을 이루도록 합치는 함수를 설계하세요.
(list [a, b, c]와 [1, 2, 3]이 있다면, 함수는 [a, 1, b, 2, c, 3]을 반환해야 합니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;problem-3&#34;&gt;Problem 3&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fibonacci 수열 100개를 연산하는 함수를 설계하세요.
(처음 두개의 수는 0과 1이고, 다음 숫자는 이전의 두개의 수를 합친 값입니다, 여기 10개의 Fibonacci 수열 예가 있습니다; 0, 1, 1, 2, 3, 5, 8, 13, 21, 34.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;problem-4&#34;&gt;Problem 4&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;양의 정수로 구성된 list를 받아 정렬하고 형식화할 때, 가능한 가장 큰 수가 되도록 함수를 설계하세요.
([50, 2, 1, 9] list를 받으면 형식화된 95021&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;를 출력해야 합니다.)
&lt;strong&gt;Update:&lt;/strong&gt; Apparently this problem got a lot of people talking (although not as much as Problem 5 below.) &lt;a href=&#34;https://blog.svpino.com/2015/05/08/solution-to-problem-4&#34;&gt;You can click here to read my solution.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;problem-5&#34;&gt;Problem 5&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;1, 2, &amp;hellip;, 9(이 순서로) 사이에서 +/-를 포함시키거나, 포함시키지 않고 결과가 항상 100인 모든 가능성을 출력하는 프로그램을 작성하세요.
(예를 들어: 1 + 2 + 34 - 5 + 67 - 8 + 9 = 100.)
&lt;strong&gt;Update:&lt;/strong&gt; (&lt;a href=&#34;https://blog.svpino.com/2015/05/08/solution-to-problem-5-and-some-other-thoughts-about-this-type-of-questions&#34;&gt;Here is one solution to this problem&lt;/a&gt; in case you are curious.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;unfortunately-you-aren-t-the-one-that-needs-this&#34;&gt;&lt;em&gt;Unfortunately, you aren&amp;rsquo;t the one that needs this&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;만약 이 블로그의 모든 것이나 Software Development에 대한 다른 블로그의 글을 읽는 것이 짜증 나면, 아마 당신은 충분히 1시간 내에 저 5가지의 문제를 해결하겠죠. 위 문제들이 멍청하다고 생각하는 사람들은 대부분 해결하지 못하는 멍청이에요. (쓴소리해서 미안해요.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.svpino.com/2015/05/07/five-programming-problems-every-software-engineer-should-be-able-to-solve-in-less-than-1-hour&#34;&gt;Five programming problems every Software Engineer should be able to solve in less than 1 hour&lt;/a&gt; - Santiago L. Valdarrama&lt;br /&gt;
번역 - Hyun Jun (Cryptos) An&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;단어의 개념이 아닌 &lt;strong&gt;단어만&lt;/strong&gt; 많이 아는 사람을 의미하는 것 같습니다.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;list [50, 2, 1, 9]의 형식화된 수중 가장 큰 수가 95021.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Convert encoding of Documents in Linux</title>
      <link>https://memnoth.github.io/post/convert-encoding-of-documents-in-linux/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/convert-encoding-of-documents-in-linux/</guid>
      <description>

&lt;h1 id=&#34;introduce&#34;&gt;Introduce&lt;/h1&gt;

&lt;p&gt;리눅스에서 문서를 읽을때 euc-kr로 저장된 파일을 읽으면 깨진다. 리눅스는 기본이 utf-8이기 때문에 euc-kr 파일을 읽으려면 수작업으로 인코딩을 변경하고 읽어야 하는데 이 작업이 여간 &lt;em&gt;따분하고&lt;/em&gt; 귀찮다. 특히 미드/영드/일드를 볼때 ..&lt;br /&gt;
그래서 인코딩을 변경하는 쉘 스크립트를 작성하고 alias로 등록하여 빠르게 변경하기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//pastebin.com/embed_js.php?i=80450rEJ&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;스크립트를 vi/vim으로 작성하고 &lt;code&gt;conv2utf8&lt;/code&gt;로 ~/Documents에 저장한다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bash_aliases&lt;/code&gt;파일을 열고 &lt;code&gt;alias c8=&#39;$HOME/Documents/conv2utf8&#39;&lt;/code&gt;로 저장한다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source ~/.bashrc&lt;/code&gt;로 쉘을 다시 로드한 뒤 &lt;code&gt;c8 /path/to/directory/&lt;/code&gt;로 사용한다.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pirates use Flask, the Navy uses Django</title>
      <link>https://memnoth.github.io/post/flask-vs-django/</link>
      <pubDate>Sun, 03 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/flask-vs-django/</guid>
      <description>

&lt;h2 id=&#34;introduce&#34;&gt;&lt;strong&gt;Introduce&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;새로운 아이디어를 테스트하거나, 제품을 개발하고자 한다면, 빌드하기 위해 Web stack을 선택해야 합니다. 파이썬 개발자를 위해 두 개의 유명한 웹 프레임워크 &lt;a href=&#34;http://flask.pocoo.org&#34;&gt;Flask&lt;/a&gt;와 &lt;a href=&#34;https://www.djangoproject.com&#34;&gt;Django&lt;/a&gt;가 있죠. I have experience with both and have chosen one or the other for my myriad of projects and copanies. My current product, &lt;a href=&#34;https://wakatime.com&#34;&gt;WakaTime&lt;/a&gt;는 Flask로 개발 되었고, Flask는 우리가 목표에 도달할 수 있도록 도와주었습니다.&lt;/p&gt;

&lt;p&gt;경험이 있다는 것은 올바른 프레임워크를 선택하도록 도와줍니다. 개발자가 결정하는데 도울 수 있도록 워크시트를 제작하였습니다. &lt;a href=&#34;https://wakatime.com/django-vs-flask-worksheet&#34;&gt;&lt;em&gt;Django vs Flask worksheet&lt;/em&gt;&lt;/a&gt;에서 최적의 프레임워크를 선택할 수 있도록 확인해보세요.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;differences-between-django-and-flask&#34;&gt;&lt;strong&gt;Differences between Django and Flask&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/django/django&#34;&gt;Django&lt;/a&gt;의 커뮤니티는 크고 오래되었으며 &lt;a href=&#34;https://github.com/mitsuhiko/flask&#34;&gt;Flask&lt;/a&gt;의 커뮤니티는 활발해요.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Django&lt;/th&gt;
&lt;th&gt;Flask&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;탄생년도&lt;/td&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;포럼&lt;/td&gt;
&lt;td&gt;큼&lt;/td&gt;
&lt;td&gt;새롭고 활발함&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;추천수&lt;/td&gt;
&lt;td&gt;13,820&lt;/td&gt;
&lt;td&gt;13,489&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;구독수&lt;/td&gt;
&lt;td&gt;607&lt;/td&gt;
&lt;td&gt;1,036&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;landscape&#34;&gt;&lt;strong&gt;Landscape&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;많은 기업들이 빠른 제품개발과 사이트 트래픽을 쉽게 해결하고, 크기를 키우기 위해서 Django와 Flask를 사용합니다.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Django를 사용하는 사이트&lt;/th&gt;
&lt;th&gt;Flask를 사용하는 사이트&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.eventbrite.com&#34;&gt;Eventbrite&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wakatime.com&#34;&gt;WakaTime&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://prezi.com&#34;&gt;Prezi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.twilio.com&#34;&gt;Twilio&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://bitbucket.org&#34;&gt;Bitbucket&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://arstechnica.com/information-technology/2012/11/how-team-obamas-tech-efficiency-left-romney-it-in-dust/&#34;&gt;President Obama&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://instagram.com&#34;&gt;Instagram&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://close.io&#34;&gt;Close.io&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pinterest.com&#34;&gt;Pinterest&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://keen.io&#34;&gt;Keen.io&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://zerocater.com&#34;&gt;Zerocater&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;performance&#34;&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Flask는 Django보다 좀 더 빠르게 JSON을 반환합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/8gpRqmI.png&#34; alt=&#34;Django vs Flask Performance&#34; /&gt;&lt;/p&gt;

&lt;p&gt;하지만, 타 언어 프레임워크와 비교하자면 둘의 차이는 신경쓸 필요가 없습니다. &lt;em&gt;Django와 Flask를 사용하는 이유는 개발 속도 향상, 빠른 빌드, 충분히 빠른 프레임워크이기 때문이죠.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/nxayjgx.png&#34; alt=&#34;Django vs Flask Performance Insignificant&#34; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로, Django와 Flask를 사용하는 이유는 개발시간 단축과 빠른 빌드입니다. 제품개발에 있어 어느 프레임워크가 최적인지 결정할 때, 이 &lt;a href=&#34;https://wakatime.com/django-vs-flask-worksheet&#34;&gt;워크시트&lt;/a&gt;와 당신의 결정을 고려하여 선택하세요.&lt;/p&gt;

&lt;p&gt;또한, 저는 당신의 결정을 돕고 의견 나누길 희망합니다. &lt;a href=&#34;https://wakatime.com/blog/25-pirates-use-flask-the-navy-uses-django?&#34;&gt;여기&lt;/a&gt;에 질문을 남기거나, irc.freenode.net의 #wakatime에 방문하세요.&lt;/p&gt;

&lt;p&gt;P.S. Pirates use Flask, the Navy uses Django. &lt;a href=&#34;https://wakatime.com&#34;&gt;WakeTime&lt;/a&gt;는 해적선입니다 ;)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;원문 &amp;ndash; &lt;a href=&#34;https://wakatime.com/blog/25-pirates-use-flask-the-navy-uses-django?&#34;&gt;Pirates use Flask, the Navy uses Django&lt;/a&gt; (Alan Hamlett)&lt;br /&gt;
번역 &amp;ndash; Hyun Jun, An&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>