<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sqlalchemy on Thomas An</title>
    <link>https://memnoth.github.io/tags/sqlalchemy/</link>
    <description>Recent content in Sqlalchemy on Thomas An</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Feb 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memnoth.github.io/tags/sqlalchemy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Performance overhead of sqlalchemy</title>
      <link>https://memnoth.github.io/post/python/performance-overhead-of-sqlalchemy/</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/post/python/performance-overhead-of-sqlalchemy/</guid>
      <description>원문 &amp;ndash; Performance Overhead of SQLAlchemy by Xiaonuo Gantan
번역 &amp;ndash; Yi Soo, (Thomas) An
import time import sqlite3 from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String, create_engine from sqlalchemy.orm import scoped_session, sessionmaker Base = declarative_base() session = scoped_session(sessionmaker()) class User(Base): __tablename__ = &amp;quot;user&amp;quot; id = Column(Integer, primary_key=True) name = Column(String(255)) def init_db(dbname=&#39;sqlite:///example.db&#39;): engine = create_engine(dbname, echo=False) session.remove() session.configure(bind=engine, autoflush=False, expire_on_commit=False) Base.metadata.drop_all(engine) Base.metadata.create_all(engine) return engine def test_sqlalchemy_orm(number_of_records=100000): init_db() start = time.</description>
    </item>
    
  </channel>
</rss>