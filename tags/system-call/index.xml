<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System Call on Thomas An</title>
    <link>https://memnoth.github.io/tags/system-call/</link>
    <description>Recent content in System Call on Thomas An</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Thomas An</copyright>
    <lastBuildDate>Mon, 30 Jan 2017 20:44:40 +0900</lastBuildDate>
    <atom:link href="/tags/system-call/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>read system call overhead and file hole</title>
      <link>https://memnoth.github.io/2017/01/read-system-call-overhead-and-file-hole/</link>
      <pubDate>Mon, 30 Jan 2017 20:44:40 +0900</pubDate>
      
      <guid>https://memnoth.github.io/2017/01/read-system-call-overhead-and-file-hole/</guid>
      <description>

&lt;h4 id=&#34;이-글은-advanced-programming-in-the-unix-environment의-4-6-연습문제에-관한-내용입니다&#34;&gt;&lt;em&gt;이 글은 Advanced Programming in the Unix Environment의 4.6 연습문제에 관한 내용입니다.&lt;/em&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;4.6 연습문제의 내용은 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cp(1)처럼 파일을 복사하되, 구멍&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;이 있는 파일을 복사하느 경우 출력 파일에 0 바이트들을 기록하지 않는 유틸리티를 작성하라.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 연습문제의 키 포인트는 파일의 구멍이 &lt;code&gt;\0&lt;/code&gt;로 채워져있다는 것이다.&lt;/p&gt;

&lt;p&gt;복사될 파일의 데이터는 다음과 같으며 크기는 16394 byte 이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0000000   a   b   c   d   e   f   g   h   i   j  \0  \0  \0  \0  \0  \0
0000020  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
*
0040000   A   B   C   D   E   F   G   H   I   J
0040012
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;해당 유틸리티를 간단하게 작성하면 아래와 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;  int fd_in, fd_out, n;
  char buf;

  /* 기타 예외처리와 open 함수를 이용해 파일을 열었다고 가정 */

  while ((n = read(fd_in, &amp;amp;buf, 1)) &amp;gt; 0) {
    if (buf == &#39;\0&#39;)
      continue;
    write(fd_out, &amp;amp;buf, n);
  }

  /* 기타 처리 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하지만 위 코드에는 단점이 존재하는데 파일로 부터 데이터를 1 바이트씩 읽어오므로 read 호출비용이 너무 크다는 것이다. 해당 코드를 uftrace&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;로 트레이싱해보면 실행시간이 다음과 같이 나온다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1.501 us [11287] | __monstartup();
  1.203 us [11287] | __cxa_atexit();
           [11287] | main() {

             ... 

  0.6xx us [11287] |   read(); /* 파일 크기만큼 호출 */

             ...

 18.097 ms [11287] | } /* main */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;read 호출이 16394번 일어나 실행시간이 18.097 ms 임을 확인할 수 있다. 이는 해당 코드가 불 필요하게 read를 호출하며 오버헤드를 생성하고 있음을 의미한다. 따라서 다음과 같이 buffer를 이용하여 시스템 호출 비용을 줄여보고자 한다.&lt;/p&gt;

&lt;p&gt;아래는 buffer를 이용하여 블럭단위로 데이터를 읽어오고 구멍을 제거하는 코드이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#define BUFSIZE 4096

int
rm_hole(char *pbuf, int n)
/* 배열 중간중간에 존재하는 구멍을 제거하고 배열의 앞쪽으로 정렬
 * pbuf : a b c \0 \0 \0 b c a \0 \0 c ...
 *        ^ cur
 */
{
  /* cur: 구멍이 아닌 데이터의 마지막 위치를 가짐 */
  int i, cur = 0;

  for (i = 0; i &amp;lt; n; i++) {
    if (pbuf[i] != &#39;\0&#39;) {
      if (i != cur)
        pbuf[cur] = pbuf[i];
      cur++;
    }
  }
  /* pbuf : a b c b c a c \0 \0 ... 
   *                      ^ cur
   */

  /* write 호출시 정렬된 배열의 cur값 만큼만 파일 쓰기를 하기 위함 */
  return cur;
}

int
main(int argc, char *argv[])
{
  int fd_in, fd_out, n;
  char buf[BUFSIZE];

  /* 기타 예외처리와 open 함수를 이용하여 파일을 열었다고 가정 */

  while ((n = read(fd_in, buf, BUFSIZE)) &amp;gt; 0) {
    write(fd_out, buf, rm_hole(buf, n));
  }

  /* 기타 처리 */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다시 uftrace를 이용하여 실행시간을 확인해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1.467 us [12932] | __monstartup();
  0.956 us [12932] | __cxa_atexit();
           [12932] | main() {
             
             ...

  4.300 us [12932] | read();
 20.948 us [12932] | rm_hole();
 11.663 us [12932] | write();
  
      /* read, rm_hole, write가 4번 더 호출 */

             ...

140.466 us [12932] | } /* main */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;read를 한 번 호출할 때마다 4096 byte 읽으므로 총 5번 호출된다. 실행 시간은 위와 같이 140.47 us으로 단축되었다.&lt;/p&gt;

&lt;p&gt;또한 구멍(&lt;code&gt;\0&lt;/code&gt;)이 제거된 파일은 다음과 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0000000   a   b   c   d   e   f   g   h   i   j   A   B   C   D   E   F
0000020   G   H   I   J
0000024 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;요약&#34;&gt;요약&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;read (System call)은 비용이 크므로 남용하지 말고 buffer 메커니즘을 이용하자.&lt;/li&gt;
&lt;li&gt;파일의 오프셋을 크기보다 키우면 &lt;code&gt;\0&lt;/code&gt;로 채워진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;현재 파일의 오프셋이 파일 크기보다 크게 설정될 수 있다. 이때 write 함수를 호출하면 파일의 크기는 오프셋에 맞게 늘어나고 빈 공간은 &lt;code&gt;\0&lt;/code&gt; 으로 쓰여진다. 이러한 공간을 구멍이라 말한다.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;C/C++로 작성된 프로그램의 실행 상태를 트레이싱하고 분석하는 툴, &lt;a href=&#34;https://github.com/namhyung/uftrace&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
