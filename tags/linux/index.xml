<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Memnoth</title>
    <link>https://memnoth.github.io/tags/linux/</link>
    <description>Recent content in Linux on Memnoth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 </copyright>
    <lastBuildDate>Mon, 26 Jun 2017 11:53:39 +0900</lastBuildDate>
    <atom:link href="/tags/linux/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to get your Realtek RTL8111/RTL8168 working</title>
      <link>https://memnoth.github.io/2017/06/26/how-to-get-your-realtek-rtl8111-rtl8168-working/</link>
      <pubDate>Mon, 26 Jun 2017 11:53:39 +0900</pubDate>
      
      <guid>https://memnoth.github.io/2017/06/26/how-to-get-your-realtek-rtl8111-rtl8168-working/</guid>
      <description>

&lt;p&gt;원문 &amp;ndash; &lt;a href=&#34;https://unixblogger.com/2016/08/11/how-to-get-your-realtek-rtl8111rtl8168-working-updated-guide/&#34; target=&#34;_blank&#34;&gt;How To get your Realtek RTL8111/RTL8168 working&lt;/a&gt; by Unixblogger&lt;br /&gt;
번역 &amp;ndash; Yi Soo, (Thomas) An&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;why-do-i-need-this-driver-anyway&#34;&gt;Why do I need this driver anyway?&lt;/h1&gt;

&lt;p&gt;많은 분들이 제게 &amp;ldquo;이게 왜 필요하죠? 리눅스에서 지원하지 않나요?&amp;hellip;&amp;rdquo; 라고 물어봅니다. 하지만 &lt;code&gt;RTL8111/RTL8168&lt;/code&gt;은 오픈 소스가 아니에요. 이제 왜 리눅스 커널에 포함되지 않는지 아시겠죠?&lt;br /&gt;
그래서 우리가 직접 빌드해야 된답니다.&lt;/p&gt;

&lt;h1 id=&#34;the-installation-methods&#34;&gt;The installation methods&lt;/h1&gt;

&lt;p&gt;Ubuntu/Debian에서 디바이스 드라이버를 컴파일하는 방법에 대해 글을 쓴 이후로 많은 것이 변했습니다. 그래서 오늘은 드라이버를 설치하기 위한 방법 2개를 소개하고자 합니다.&lt;/p&gt;

&lt;h1 id=&#34;the-automatic-way&#34;&gt;The automatic way&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;NOTE: 힌트를 준 &lt;code&gt;Liyu&lt;/code&gt;에게 고마움을 전합니다.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;NOTE2: 인터넷 연결이 필요합니다. WLAN이나 USB 이더넷 카드를 이용해서 인터넷에 연결해주세요.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu와 Debian의 저장소에는 우리가 설치할 드라이버가 포함되어 있습니다. Debian 유저라면 &lt;code&gt;non-free&lt;/code&gt; 패키지 소스를 활성화(Enable) 해야하고 Ubuntu 유저라면 &lt;code&gt;universe&lt;/code&gt; 패키지 소스를 활성화해야 합니다. &lt;em&gt;/etc/apt/sources.list&lt;/em&gt; 를 root 권한과 함께 텍스트 에디터로 열어서 수정해야 합니다.&lt;/p&gt;

&lt;h2 id=&#34;debian-이용자&#34;&gt;Debian 이용자&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;deb http://ftp.de.debian.org/debian/ jessie main contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 라인을 다음과 같이 변경하고 저장합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://ftp.de.debian.org/debian/ jessie main contrib non-free
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;저장소를 업데이트합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;ubuntu-이용자&#34;&gt;Ubuntu 이용자&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;deb http://de.archive.ubuntu.com/ubuntu/ xenial main restricted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 라인을 다음과 같이 변경하고 저장합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://de.archive.ubuntu.com/ubuntu/ xenial main restricted universe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;저장소를 업데이트합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 준비가 되었으니 아래 명령어를 이용하여 디바이스 드라이버를 설치합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install r8168-dkms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CPU 종류에 따라 디바이스 드라이버를 빌드하는데 소요되는 시간이 있습니다.&lt;br /&gt;
자동화 방법의 장점은 Kernel 업데이트가 생기면 &lt;em&gt;dkms&lt;/em&gt; 에 의해 &lt;code&gt;r8168&lt;/code&gt; 드라이버도 업데이트됩니다. 빌드가 끝나고 이더넷 카드를 사용할 수 있어야 하는데 그렇지 않다면 재부팅합니다.&lt;/p&gt;

&lt;h1 id=&#34;the-manual-way&#34;&gt;The manual way&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;NOTE: Manual 방식은 4.0 이상의 커널에서 테스트되었습니다.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-의존성-설치&#34;&gt;1. 의존성 설치&lt;/h3&gt;

&lt;p&gt;우선 인터넷에 연결되어 있어야 합니다. 물론 필요한 패키지를  Debian/Ubuntu DVD에서 찾을 수도 있습니다.&lt;br /&gt;
의존성 패키지를 설치하기 위해 아래의 명령어를 입력합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential linux-headers-$(uname -r)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-드라이버-코드-다운로드&#34;&gt;2. 드라이버 코드 다운로드&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.realtek.com.tw/downloads/downloadsView.aspx?Langid=1&amp;amp;PNid=13&amp;amp;PFid=5&amp;amp;Level=5&amp;amp;Conn=4&amp;amp;DownTypeID=3&amp;amp;GetDown=false#2&#34; target=&#34;_blank&#34;&gt;링크&lt;/a&gt;를 통하여 Realtek 홈페이지에서 공식 드라이버를 받을 수 있습니다. 커널 버전이 4.7 이상이면 &lt;code&gt;LINUX driver for kernel up to 4.7&lt;/code&gt;를 선택하고 아니면 &lt;code&gt;Linux driver for kernel 2.4.x (Support x86 and x64)&lt;/code&gt;를 선택합니다.&lt;/p&gt;

&lt;h3 id=&#34;3-블랙리스트에-r8169-드라이버-추가&#34;&gt;3. 블랙리스트에 r8169 드라이버 추가&lt;/h3&gt;

&lt;p&gt;시스템에 &lt;code&gt;r8168&lt;/code&gt; 드라이버가 없으면 r8169를 사용하게 됩니다. 하지만 RTL8168 이더넷 카드에서 r8169 드라이버는 불안정합니다.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; r8169가 로드되는 것을 막기 위하여 블랙리스트를 이용합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@linux:~$ sudo sh -c &#39;echo blacklist r8169 &amp;gt;&amp;gt; /etc/modprobe.d/blacklist.conf&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-소스코드-압축해제&#34;&gt;4. 소스코드 압축해제&lt;/h3&gt;

&lt;p&gt;드라이버를 다운로드하고 나서 압축을 풉니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@linux:~@ tar xfvj path/to/file.tar.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;NOTE: 소스코드 파일 이름은 다를 수 있으니 주의하세요.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-컴파일-및-설치&#34;&gt;5. 컴파일 및 설치&lt;/h3&gt;

&lt;p&gt;압축해제된 폴더로 이동합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@linux:~$ cd path/to/file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 스크립트를 이용하여 컴파일 및 설치 과정을 진행합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@linux:~/path/to/file$ sudo ./autorun.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;드라이버 빌드가 끝나고 올바르게 설치되었다면 아래와 같이 출력되어야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Check old driver and unload it.
rmmod r8169
Build the module and install
At main.c:222:
- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175
- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178
sign-file: certs/signing_key.pem: No such file or directory
Backup r8169.ko
rename r8169.ko to r8169.bak
DEPMOD 4.4.0-31-generic
load module r8168
Updating initramfs. Please wait.
update-initramfs: Generating /boot/initrd.img-4.4.0-31-generic
Completed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-드라이버-확인&#34;&gt;6. 드라이버 확인&lt;/h3&gt;

&lt;p&gt;마지막으로 드라이버가 올바르게 로드되었는지 확인합니다. 어떠한 오류도 없다면 아래와 같이 출력됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@linux:~$ lsmod | grep r8168
r8168                 491520  0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이더넷 디바이스에서도 확인해봅니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@linux:~$ sudo ethtool -i enp1s0
driver: r8168
version: 8.042.00-NAPI
firmware-version:
expansion-rom-version:
bus-info: 0000:07:00.0
supports-statistics: yes
supports-test: no
supports-eeprom-access: yes
supports-register-dump: yes
supports-priv-flags: no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;로드되지 않았으면 시스템을 재부팅하고 다시 확인합니다.&lt;/p&gt;

&lt;h1 id=&#34;that-s-it&#34;&gt;That&amp;rsquo;s it&lt;/h1&gt;

&lt;p&gt;이제 Realtek 공식 드라이버를 이용할 준비가 되었습니다. 만약 궁금한 점이나 제안하고 싶은 것이 있다면 댓글로 알려주세요.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;This means slow download rates, homepages taking hours to load and so on.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>YouCompleteMe - libtinfo.so.5 not found</title>
      <link>https://memnoth.github.io/2016/07/24/ycm-libtinfo-so-5-not-found/</link>
      <pubDate>Sun, 24 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/2016/07/24/ycm-libtinfo-so-5-not-found/</guid>
      <description>&lt;p&gt;Laptop에 Fedora 24를 설치하고 YouCompleteMe&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 인스톨했으나 &lt;em&gt;SHUTTING DOWN&lt;/em&gt; 오류를 출력하며 정상적으로 실행되지 않았다.&lt;br /&gt;
&lt;strong&gt;:YcmToggleLogs stderr&lt;/strong&gt;를 통하여 디버깅을 해보니 시스템에서 &lt;code&gt;libtinfo.so.5&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;를 찾지 못해 발생한 예외였다.&lt;/p&gt;

&lt;p&gt;설치된 패키지가 있나 확인해보니 6.0.5 버전으로 존재했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dnf list installed | grep ncurses
ncurses.x86_64                         6.0-5.20160116.fc24      @koji-override-0
ncurses-base.noarch                    6.0-5.20160116.fc24      @koji-override-0
ncurses-libs.x86_64                    6.0-5.20160116.fc24      @koji-override-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lib64 디렉터리에서도 &lt;code&gt;libtinfo.so.6&lt;/code&gt;을 찾을 수 있다, 나는 libtinfo.so.5를 원하는데&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l /lib64/libtinfo*
lrwxrwxrwx. 1 root root     15  4월  8 19:33 /lib64/libtinfo.so.6 -&amp;gt; libtinfo.so.6.0
-rwxr-xr-x. 1 root root 180192  4월  8 19:33 /lib64/libtinfo.so.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;물론 5까지 지원하는 &lt;code&gt;ncurses-compat-libs&lt;/code&gt;를 설치해도 되지만 심볼릭 링크를 이용해서 처리했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo ln -s /lib64/libtinfo.so.6.0 /lib64/libtinfo.so.5

$ ls -l /lib64/libtinfo*
lrwxrwxrwx. 1 root root     15  7월 24 02:06 libtinfo.so.5 -&amp;gt; libtinfo.so.6.0
lrwxrwxrwx. 1 root root     15  4월  8 19:33 libtinfo.so.6 -&amp;gt; libtinfo.so.6.0
-rwxr-xr-x. 1 root root 180192  4월  8 19:33 libtinfo.so.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 vim을 실행해보면 &lt;em&gt;SHUTTING DOWN&lt;/em&gt; 오류는 출력되지 않는다.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;vim에서 사용할 수 있는 우수한 code completion engine이다. &lt;a href=&#34;https://github.com/Valloric/YouCompleteMe&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;libtinfo는 ncurses 라이브러리 파일이다.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>비글본 블랙에서의 Dynamic Linking 오류</title>
      <link>https://memnoth.github.io/2016/06/24/dynamic-linking-error-on-bbb/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/2016/06/24/dynamic-linking-error-on-bbb/</guid>
      <description>&lt;p&gt;임베디드 시스템에선 코드 작성 및 컴파일을 빠르게 하기 위해 Host PC와 Target board를 NFS로 연결하여 Host PC에서 컴파일 작업을 하고, Target board에서는 실행시키는 구조로 개발환경을 빌드한다.&lt;/p&gt;

&lt;p&gt;NFS 개발환경을 설정한 다음 arm gcc를 이용하여 컴파일을 했음에도 불구하고 &lt;code&gt;No such file or directory&lt;/code&gt; 오류가 발생하였다.&lt;br /&gt;
계정 권한, 파일 권한, Host PC의 mount 권한까지 모두 확인하였지만 잘못된 부분이 없었기에 무척 난감했는데 Dynamic Linking이 원인이였다.&lt;/p&gt;

&lt;p&gt;test가 실행파일이라 가정하고 &lt;code&gt;file&lt;/code&gt; 명령어를 이용하여 확인해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.3, for GNU/Linux 2.6.16, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/lib/&lt;strong&gt;ld-linux.so.3&lt;/strong&gt;는 프로그램이 메모리에 적재되는 시점에서 실행에 필요한 라이브러리를 링킹해주는 파일이다.&lt;br /&gt;
Host PC에서 프로그램 링킹은 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt;가 담당하지만 비글본 블랙에서의 링킹은 /lib/&lt;code&gt;ld-linux-armhf.so.3&lt;/code&gt;이 담당한다.&lt;br /&gt;
비글본 블랙에서 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt;를 찾을 수 없으니 실행이 되지 않았던 것인데 그렇다고 &lt;code&gt;ld-linux-armhf.so.3&lt;/code&gt;를 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt;로 바꾸면 안된다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ld-linux-armhf.so.3&lt;/code&gt;를 링크하는 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt; 심볼릭 링크를 생성시키면 올바르게 동작한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /lib/ld-linux-armhf.so.3 /lib/ld-linux.so.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;비글본 블랙에서 위의 명령어로 &lt;strong&gt;ld-linux.so.3&lt;/strong&gt; 심볼릭 링크를 생성하고 &lt;code&gt;./test&lt;/code&gt;로 다시 실행해보자.&lt;br /&gt;
이젠 제대로 실행한다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mmap을 이용하여 GPIO 제어하기 - #1. Clock Enabling</title>
      <link>https://memnoth.github.io/2016/05/19/beagleboard-handle-gpio-by-mmap-01/</link>
      <pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/2016/05/19/beagleboard-handle-gpio-by-mmap-01/</guid>
      <description>

&lt;h4 id=&#34;아래-가이드는-c-언어와-linux에-능숙하고-computer-organization-microprocessor를-수강한-적-있는-학부생에게-추천합니다&#34;&gt;&lt;em&gt;아래 가이드는 C 언어와 Linux에 능숙하고 Computer Organization, Microprocessor를 수강한 적 있는 학부생에게 추천합니다.!&lt;/em&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;왜-mmap을-이용하여-direct로-접근하나요&#34;&gt;왜 mmap을 이용하여 direct로 접근하나요?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The memory-mapping method allows you to directly access the registors that control the&lt;br /&gt;
GPIOs. Memory-mapping is very fast (about 1000 times faster than file I/O!), but only&lt;br /&gt;
processes with root permissions can use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;책&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;에 따르면 memory-mapping 함수는 register에 직접 접근하도록 하며, 이는 &lt;code&gt;file I/O&lt;/code&gt; 방식보다 1000배는 빠르다고 합니다.&lt;/p&gt;

&lt;p&gt;BeagleBone Black의 GPIO는 기본적으로 disable 되어 있는데, 이를 활성화는 방법에는 2가지가 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SYSFS를 이용한 GPIO export.&lt;/li&gt;
&lt;li&gt;Register를 이용하여 직접 clock을 enable 하는 것.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서는 C 코드를 이용하여 register를 직접 제어하는 것에 포커스를 맞추겠습니다.&lt;br /&gt;
(SYSFS를 이용한 GPIO는 Beagleboard 홈페이지에 가면 친절하게 설명해줍니다)&lt;/p&gt;

&lt;p&gt;들어가기에 앞서 아래의 준비물이 필요합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiZjbzk3ObMAhXC3KYKHeorDmYQFggcMAA&amp;amp;url=http%3A%2F%2Fwww.ti.com%2Flit%2Fug%2Fspruh73m%2Fspruh73m.pdf&amp;amp;usg=AFQjCNGGBH3-5NJnlA7Plnk3BhbVi_u77g&amp;amp;sig2=IK-nMfK0scQli5VemGRPPA&amp;amp;bvm=bv.122448493,d.dGY&#34; target=&#34;_blank&#34;&gt;AM335x Sitara Processors, Technical Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CircuitCo/BeagleBone-Black/blob/master/BBB_SRM.pdf&#34; target=&#34;_blank&#34;&gt;BeagleBone Black System Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/derekmolloy/boneDeviceTree/tree/master/docs&#34; target=&#34;_blank&#34;&gt;Derek Molloy&amp;rsquo;s Header Table Reference&lt;/a&gt; - both P8, and P9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;주로 Technical Reference Manual(이하 TRM)과 Header Table 문서를 참조하니 GPIO PIN 개념을 이해하고 TRM에서 register 정보를 찾을 수 있어야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;register를-이용하여-clock을-enable-하기&#34;&gt;Register를 이용하여 clock을 enable 하기&lt;/h3&gt;

&lt;p&gt;리눅스는 대부분의 device를 파일로 추상화하여 제공합니다, 모듈화가 아주 잘 되어 있죠.&lt;br /&gt;
Device를 파일로 접근한다면 모든 처리 루틴을 아래와 같이 쉽게 생각할 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;파일을 연다.&lt;/li&gt;
&lt;li&gt;파일에 데이터를 쓴다.&lt;/li&gt;
&lt;li&gt;파일을 닫는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;우리는 메모리에 직접 접근하여 register에 데이터를 쓰기(&lt;strong&gt;write&lt;/strong&gt;)할 것이므로 메모리를 추상화한 &lt;code&gt;/dev/mem&lt;/code&gt;을 이용할 것입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;...
fd = open(&amp;quot;/dev/mem&amp;quot;, O_RDWR|O_SYNC);

/* 기타 처리 루틴 ~ */

gpio_addr = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, GPIO_BASE_ADDR);

*(gpio_addr + led_addr) = 0x01;     // LED를 On하는 로직이라 가정.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/dev/mem&lt;/code&gt;을 오픈하고 &lt;code&gt;mmap()&lt;/code&gt;을 호출하는 것 까진 좋으나 mapped memory를 통하여 값에 접근하려면 아마도 실패할 것입니다.&lt;br /&gt;
이는 GPIO의 clock이 기본적으로 disable 되어 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;Patricia 씨가 구글 그룹스에 남긴 글입니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;일단 그건 clock 문제야, 우리가 BeagleBone Black을 부팅할 때 GPIO 1, 2, 그리고 3의 clocking system은 비활성화 되버려 (GPIO 0은 항상 활성 상태).&lt;/p&gt;

&lt;p&gt;따라서 다음과 같은 방법이 있는데:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pin export 하기 (and then the system enables the clock automatically)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;CM_PER_GPIO#_CLKCTRL 레지스터의 일부 bits 수정하기 (TRM의 CM_PER 페이지 참조)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;mdash; Patricia N.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서 CM_PER_GPIO2_CLKCTRL을 활성화하기 위해 TRM 문서의 CM_PER_GPIO2_CLKCTRL&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;의 &lt;code&gt;MODULEMODE&lt;/code&gt;을 확인해야 합니다.&lt;br /&gt;
해당 register의 값을 2로 수정하므로써 clock이 enable 되는 것입니다.&lt;/p&gt;

&lt;p&gt;아래 소스코드를 분석하여 확실하게 이해하세요.&lt;br /&gt;
(간단하게 작성하였으므로 완벽하게 동작하지 않습니다.!)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define CM_PER_BASE 0x44E00000

#define CM_PER_GPIO1 0xAC
#define CM_PER_GPIO2 0xB0
#define CM_PER_GPIO3 0xB4

#define MODE_ENABLE 0x2

void init_GPIO_enable(int fd);

int main(void)
{
    ...

    init_GPIO_enable(mem_fd);

    ...
}

void init_GPIO_enable(int fd)
{
    ...

    // CM_PER_BASE 주소를 기반으로 memory mapped 합니다.
    cm_per_addr = (char *)mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, CM_PER_BASE);

    ...

    // CM_PER_GPIO2의 오프셋 주소의 값을 수정하여 Enable 합니다. 
    *(cm_per_addr + CM_PER_GPIO2) = MODE_ENABLE;

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 &lt;code&gt;GPIO_OE&lt;/code&gt;, &lt;code&gt;GPIO_DATAIN&lt;/code&gt;, &lt;code&gt;GPIO_DATAOUT&lt;/code&gt;을 이용하여 값을 읽고 쓸수 있습니다.&lt;br /&gt;
한번 enable 하면 Process를 종료하더라도 해당 register의 값은 변하지 않습니다.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://www.amazon.com/Android-beaglebone-black-andrew-henderson-ebook&#34; target=&#34;_blank&#34;&gt;Android for the BeagleBone Black&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://beagleboard.org/Community/Forums?place=msg%2Fbeagleboard%2FOYFp4EXawiI%2F4T1CsRpjAQAJ&#34; target=&#34;_blank&#34;&gt;구글 그룹스&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;1196 page
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Convert encoding of Documents in Linux</title>
      <link>https://memnoth.github.io/2015/05/05/convert-encoding-of-documents-in-linux/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memnoth.github.io/2015/05/05/convert-encoding-of-documents-in-linux/</guid>
      <description>

&lt;h1 id=&#34;introduce&#34;&gt;Introduce&lt;/h1&gt;

&lt;p&gt;리눅스에서 문서를 읽을때 euc-kr로 저장된 파일을 읽으면 깨진다. 리눅스는 기본이 utf-8이기 때문에 euc-kr 파일을 읽으려면 수작업으로 인코딩을 변경하고 읽어야 하는데 이 작업이 여간 &lt;em&gt;따분하고&lt;/em&gt; 귀찮다. 특히 미드/영드/일드를 볼때 ..&lt;br /&gt;
그래서 인코딩을 변경하는 쉘 스크립트를 작성하고 alias로 등록하여 빠르게 변경하기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//pastebin.com/embed_js.php?i=80450rEJ&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;스크립트를 vi/vim으로 작성하고 &lt;code&gt;conv2utf8&lt;/code&gt;로 ~/Documents에 저장한다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bash_aliases&lt;/code&gt;파일을 열고 &lt;code&gt;alias c8=&#39;$HOME/Documents/conv2utf8&#39;&lt;/code&gt;로 저장한다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source ~/.bashrc&lt;/code&gt;로 쉘을 다시 로드한 뒤 &lt;code&gt;c8 /path/to/directory/&lt;/code&gt;로 사용한다.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
